<?php
/**
 * Copyright (C) 2015 Digimedia Sp. z o.o. d/b/a Clearcode
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

namespace SevenTag\Api\UserBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use SevenTag\Component\User\Model\UserInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * @param QueryBuilder $queryBuilder
     * @param $role
     * @return UserRepository
     */
    public function excludeUsersWithRole(QueryBuilder $queryBuilder, $role)
    {
        $queryBuilder->andWhere('u.roles NOT LIKE \'%' . $role . '%\'');

        return $this;
    }

    /**
     * @param UserInterface $user
     * @param int $limit
     * @param int $offset
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findWithoutUserQueryBuilder(UserInterface $user, $limit = 20, $offset = 0)
    {
        return $this
            ->createQueryBuilder('u')
            ->where('u.id NOT IN (:user)')
            ->setMaxResults($limit)
            ->setFirstResult($offset)
            ->setParameter(':user', $user)
            ->addOrderBy('u.updatedAt', 'DESC')
            ->addOrderBy('u.id', 'DESC');
    }

    /**
     * @param UserInterface $user
     * @param int $limit
     * @param int $offset
     * @return ArrayCollection
     */
    public function findWithoutUser(UserInterface $user, $limit = 20, $offset = 0)
    {
        return $this
            ->findWithoutUserQueryBuilder($user, $limit, $offset)
            ->getQuery()
            ->execute();
    }

    /**
     * @param UserInterface $user
     * @param int $limit
     * @param int $offset
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findNonApiUserAndWithoutUserQueryBuilder(UserInterface $user, $limit = 20, $offset = 0)
    {
        $qb = $this->findWithoutUserQueryBuilder($user, $limit, $offset);

        $this->excludeUsersWithRole($qb, UserInterface::ROLE_API);

        return $qb;
    }

    /**
     * @param UserInterface $user
     * @param int $limit
     * @param int $offset
     * @return ArrayCollection
     */
    public function findNonApiUserAndWithoutUser(UserInterface $user, $limit = 20, $offset = 0)
    {
        return $this
            ->findNonApiUserAndWithoutUserQueryBuilder($user, $limit, $offset)
            ->getQuery()
            ->execute();
    }

    /**
     * @param UserInterface $user
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function countWithoutUserQueryBuilder(UserInterface $user)
    {
        return $this
            ->createQueryBuilder('u')
            ->select('COUNT(u.id)')
            ->where('u.id NOT IN (:user)')
            ->setParameter(':user', $user);
    }

    /**
     * @param UserInterface $user
     * @return int
     */
    public function countWithoutUser(UserInterface $user)
    {
        return (int)$this
            ->countWithoutUserQueryBuilder($user)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param UserInterface $user
     * @return QueryBuilder
     */
    public function countNonApiUserAndWithoutUserQueryBuilder(UserInterface $user)
    {
        $qb = $this
            ->createQueryBuilder('u')
            ->select('COUNT(u.id)')
            ->where('u.id NOT IN (:user)')
            ->setParameter(':user', $user);

        $this->excludeUsersWithRole($qb, UserInterface::ROLE_API);

        return $qb;
    }

    /**
     * @param UserInterface $user
     * @return int
     */
    public function countNonApiUserAndWithoutUser(UserInterface $user)
    {
        return (int)$this
            ->countNonApiUserAndWithoutUserQueryBuilder($user)
            ->getQuery()
            ->getSingleScalarResult();
    }
}
