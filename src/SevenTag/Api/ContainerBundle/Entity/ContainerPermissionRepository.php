<?php
/**
 * Copyright (C) 2015 Digimedia Sp. z o.o. d/b/a Clearcode
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

namespace SevenTag\Api\ContainerBundle\Entity;

use Doctrine\ORM\EntityRepository;
use SevenTag\Api\UserBundle\Entity\User;

/**
 * ContainerPermissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContainerPermissionRepository extends EntityRepository
{
    /**
     * @param User $user
     * @param array $containerAccessIds
     * @return mixed
     */
    public function findByUserAndContainerAccessIds(User $user, array $containerAccessIds)
    {
        return $this->createQueryBuilder('cp')
            ->where('cp.user = :user')
            ->andWhere('cp.containerAccessId IN (:containerAccessId)')
            ->setParameters([
                'user' => $user,
                'containerAccessId' => $containerAccessIds
            ])
            ->getQuery()
            ->execute();
    }

    /**
     * @param ContainerPermission $containerPermission
     * @throws \Exception
     */
    public function recreateContainerPermissions(ContainerPermission $containerPermission)
    {
        $this->getEntityManager()
            ->transactional(function () use ($containerPermission) {
                $this->deleteContainerPermissions(
                    $containerPermission->getContainerAccessId(),
                    $containerPermission->getUser()->getId()
                );

                $entityManager = $this->getEntityManager();
                $entityManager->persist($containerPermission);
                $entityManager->flush();
            });
    }

    /**
     * @param $containerAccessId
     * @param $userId
     */
    public function deleteContainerPermissions($containerAccessId, $userId)
    {
        $this->createQueryBuilder('c')
            ->delete()
            ->where('c.containerAccessId = :containerAccessId')
            ->andWhere('c.user = :userId')
            ->setParameters([
                'containerAccessId' => $containerAccessId,
                'userId' => $userId
            ])
            ->getQuery()
            ->execute();
    }

    /**
     * @param $containerAccessId
     */
    public function deleteContainerPermissionsByAccessId($containerAccessId)
    {
        $this->createQueryBuilder('c')
            ->delete()
            ->where('c.containerAccessId = :containerAccessId')
            ->setParameters([
                'containerAccessId' => $containerAccessId,
            ])
            ->getQuery()
            ->execute();
    }
}
